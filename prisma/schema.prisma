// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// ENUMs untuk standarisasi data
enum Role {
  PETANI
  PEMBELI
}

enum StatusProyek {
  PERSIAPAN
  PENANAMAN
  PERAWATAN
  PANEN
  SELESAI
}

enum StatusProduk {
  TERSEDIA
  PREORDER
  HABIS
}

enum StatusPesanan {
  MENUNGGU_PEMBAYARAN
  DIPROSES
  DIKIRIM
  SELESAI
  DIBATALKAN
}

// MODEL UNTUK AUTENTIKASI (Standar NextAuth.js)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId]) // OPTIMIZATION: Add index for performance
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId]) // OPTIMIZATION: Add index for performance
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// MODEL UTAMA APLIKASI TANDUR
model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  bio           String?   @db.Text
  lokasi        String?
  linkWhatsapp  String?
  role          Role      @default(PEMBELI)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts   Account[]
  sessions   Session[]
  proyekTani ProyekTani[]
  pesanan    Pesanan[]    @relation("PesananPembeli")
}

model ProyekTani {
  id          String       @id @default(cuid())
  namaProyek  String
  deskripsi   String       @db.Text
  lokasiLahan String
  status      StatusProyek @default(PERSIAPAN)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  petaniId String
  petani   User   @relation(fields: [petaniId], references: [id], onDelete: Cascade)

  updates FarmingUpdate[]
  produk  Produk[]

  @@index([petaniId]) // OPTIMIZATION: Add index for performance
}

model FarmingUpdate {
  id        String   @id @default(cuid())
  judul     String
  deskripsi String   @db.Text
  fotoUrl   String[]
  createdAt DateTime @default(now())

  proyekTaniId String
  proyekTani   ProyekTani @relation(fields: [proyekTaniId], references: [id], onDelete: Cascade)

  @@index([proyekTaniId]) // OPTIMIZATION: Add index for performance
}

model Produk {
  id            String       @id @default(cuid())
  namaProduk    String
  deskripsi     String       @db.Text
  fotoUrl       String[]
  harga         Int
  unit          String
  stokTersedia  Float
  status        StatusProduk @default(TERSEDIA)
  estimasiPanen DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  proyekTaniId String
  proyekTani   ProyekTani @relation(fields: [proyekTaniId], references: [id], onDelete: Cascade)

  itemsPesanan OrderItem[]

  @@index([proyekTaniId]) // OPTIMIZATION: Add index for performance
}

model Pesanan {
  id               String        @id @default(cuid())
  totalHarga       Int
  status           StatusPesanan @default(MENUNGGU_PEMBAYARAN)
  alamatPengiriman String?       @db.Text
  catatanPembeli   String?       @db.Text
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  pembeliId String
  pembeli   User   @relation("PesananPembeli", fields: [pembeliId], references: [id], onDelete: Cascade)

  items OrderItem[]

  @@index([pembeliId]) // OPTIMIZATION: Add index for performance
}

model OrderItem {
  id             String @id @default(cuid())
  jumlah         Float
  hargaSaatPesan Int

  pesananId String
  pesanan   Pesanan @relation(fields: [pesananId], references: [id], onDelete: Cascade)

  produkId String
  // FIX: Changed NoAction to Restrict.
  produk   Produk @relation(fields: [produkId], references: [id], onDelete: Restrict)

  @@unique([pesananId, produkId])
  @@index([pesananId]) // OPTIMIZATION: Add index for performance
  @@index([produkId]) // OPTIMIZATION: Add index for performance
}
